import { useEffect, useState } from 'react';
import Head from 'next/head';
import Layout from '../components/Layout';
import MainStandard from '../components/MainStandard';
import Services from '../components/pages/main/Services';
import Experience from '../components/pages/main/Experience';
import Reviews from '../components/pages/main/Reviews';
import Contact from '../components/pages/main/Contact';
import Project from '../components/pages/main/Project';


type Project = {
  id: string,
  title: string,
  custom_excerpt: string,
  featured: boolean,
  primary_author: {
      profile_image: string,
      name: string
  },
  feature_image: string
  slug: string
  tags: [{
      id: string,
      name: string,
      slug: string
  }]
}


async function getPosts() {
  const res = await fetch(
    `${process.env.BLOG_URL}/ghost/api/v3/content/posts/?key=${process.env.CONTENT_API_KEY}&include=authors&include=tags&fields=id,title,custom_excerpt,featured,primary_author,feature_image,slug&filter=tag:experience`
  ).then((res) => res.json())

  const projects = res.posts;

  return projects
}

export const getStaticProps = async () => {
  const projects = await getPosts()

  return {
      props: { projects },
      revalidate: 10
  }
}

const Home:React.FC<{ projects: Project[] }> = (props) => {
  // const [_document, set_document] = useState(null)

  // const animation = () => {
  //   set_document(document)
  //   let path = document.querySelector('#path');
  //   console.log(path)
  //   let pathLength = path.getTotalLength();

  //   path.style.strokeDasharray = pathLength + ' ' + pathLength;
    
  //   let pathString: string = pathLength.toString() 
  //   path.style.strokeDashoffset = pathString;


  //   window.addEventListener('scroll', () => {

  //     let scrollPercentage = (document.documentElement.scrollTop + document.body.scrollTop) / (document.documentElement.scrollHeight - document.documentElement.clientHeight);

  //     let drawLength = pathLength * scrollPercentage; 
      
  //     let result = pathLength - drawLength

  //     let resultString = result.toString()

  //     path.style.strokeDashoffset = resultString;

  //   })
  // }

  // useEffect(() => {
  //   animation();

  // }, [])


  const { projects } = props;

  return (
    // <Layout className="overflow-hidden">
    //   <div className="line-container">
    //     <svg viewBox="0 0 173 939" fill="none" preserveAspectRatio="xMidYMax meet">
    //       <path id="path" d="M168.5 2L44 204.5L156 314L44 470.5L168.5 585L5 707L122 770.5L168.5 892.5L44 936" stroke="black" strokeWidth="5"/>
    //     </svg>

    //   </div>

    //   <Head>
    //     <title>AT Upgrades Basic Website</title>
    //     <meta name="description" content="Generated by create next app" />
    //     <link rel="icon" href="/assets/logo.svg" />
    //   </Head>
    //   <MainStandard />
    //   <Services />
    //   <Experience projects={projects} />
    //   <Reviews />
    //   <Contact />
    // </Layout>
    <div>
      welcome
    </div>
  )
}

export default Home
